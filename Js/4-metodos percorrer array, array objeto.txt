.flat
.flatMap

3 métodos simples e bem úteis para acessar diretamente chaves (keys) e valores (values) de um objeto ou de um 
array em JavaScript. São eles: Object.keys(), Object.values() e Object.entries().

Obs1: É importante lembrar que em JavaScript tanto um objeto como um array são tipos de dados definidos como 
objetos.

.keys=> retorna um array de keys.
.values=>  retorna uma array de values.
.entries=> retorna uma array de pares de [key, value]

.findIndex
.indexOf
.includes (se o array tem o item)
.some (se pelo menos um item satisfaz a condição)
.every(se todos os itens satisfazem a condição)

forEach => Percorre todos os itens de um array (um por um) isso porque internamente ele possui um loop for.
Permite executar uma função para cada item de um array. 
Sempre que você for fazer um loop for vale mais a pena usar um forEach
ex.:

let nomes = ['maria', 'josé', 'joão'];
nomes.forEach(function(nome,indice) {
  console.log(nome,indice);
});


map => Percorre todos os itens de um array (um por um) e realiza modificações nos itens. Retorna um novo array.
Internamente ele possui um loop for e Permite executar uma função para cada item de um array. 
ex.:

const nomes = ['Whinds', 'Freeway', 'Teste', 'Maria'];
nomes.map(function(nome){
console.log("Antes da alteração", nome);
  return console.log("Depois da alteração:",nome.toUpperCase());
});

const numeros = [1,2,3,4,5];
numeros.map(function(numero,indice){
console.log("Antes da alteração", "numero ", numero,"indice ",indice);
  return console.log("Depois da alteração:", "numero ",numero*2,"indice ",indice);
});
 
const numeros = [1,2,3,4,5];
const dobro = numeros.map(function(numero) {
  return numero * 2;
});

console.log("Antes da alteração:",numeros); // Resultado 1: [ 1, 2, 3 ]
console.log("Depois da alteração:",dobro); // Resultado 2: [ 2, 4, 6 ]


filter => percorre o array e filtra os elementos do Array de acordo com a condição especificada
pela função callback. O resultado é armazenada em uma nova variável do tipo array.
Portanto, o resultado será o de todos os elementos que satisfaçam a condição do filtro. 
Vale ressaltar que a array original não sofre nenhum tipo de alteração pelo método filter().

sintaxe do método filter() =>
var novaArray = arrayOriginal.filter(function(valorAtual, indice, varArray), thisArgumento))

ex1.: 
let produtos = [ 
  {nome: 'Coca Cola', preco: 5}, 
  {nome: 'Pizza', preco: 15}, 
  {nome: 'Kinder Ovo', preco: 99} 
];

let produtosBaratos = produtos.filter(function(produto) {
  return produto.preco < 20;
});
console.log(produtosBaratos);

COM ARROW FUNCTION
var numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
var numerosPares = numeros.filter(pares => (pares %2)== 0);
console.log(retorno);

SEM ARROW FUNCTION
var numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
function buscarNumerosPares (value) {
    if (value % 2 == 0) 
    return value;
}
var numerosPares = numeros.filter(buscarNumerosPares);
console.log(numerosPares);

ex2.:
SEM ARROW FUNCTION
var estados = ["São Paulo", "Minas Gerais", "Rio de Janeiro", "Rio Grande do Norte", "Santa Catarina", "Acre"];
function retornaEstado (value){
    if (value.charAt(0) == "S") 
    return value;
}
var resultado = estados.filter(retornaEstado);
console.log(resultado);

COM ARROW FUNCTION
var estados = ["São Paulo", "Minas Gerais", "Rio de Janeiro", "Rio Grande do Norte", "Santa Catarina", "Acre"];
var resultado = estados.filter( estadosComS  => (estadosComS.charAt(0) == "S"));
console.log(resultado);

ex.3: 
var produtos = [
    {id: 1, descricao: "Smartphone", categoria: "Eletrônico"},
    {id: 2, descricao: "Notebook", categoria: "Eletrônico"},
    {id: 3, descricao: "Geladeira", categoria: "Eletrodoméstico"},
    {id: 4, descricao: "Liquidificador", categoria: "Eletrodoméstico"},
    {id: 5, descricao: "Fogão", categoria: "Eletrodoméstico"}
]
function retornaEletronico (value){
    if (value.categoria == "Eletrônico")
    return value;
}
var produtosEletronico = produtos.filter(retornaEletronico);
//poderia não ter essa linha de código que o resultado seria o mesmo
produtosEletronico.forEach(produtoEletro => { 
    console.log(produtoEletro);
});

var produtosEletronico = produtos.filter(retornaEletronico);
console.log(produtosEletronico);

ex4.:
O resultado é desenvolvido com arrow function e seleciona os produtos que sejam da categoria eletrodomésticos.
O valores inválidos e nulos não são retornados.

FONTE: BETRYBE - TUTORIAIS - JAVASCRIPT

var produtos = [
    {id: 1, descricao: "Smartphone", categoria: "Eletrônico"},
    {id: 2, descricao: "Notebook", categoria: "Eletrônico"},
    {id: 3, descricao: "Geladeira", categoria: "Eletrodoméstico"},
    {id: 4, descricao: "Liquidificador", categoria: "Eletrodoméstico"},
    {id: 5, descricao: "Fogão", categoria: "Eletrodoméstico"} 
]
var produtosEletrodomestico = produtos.filter(produto => produto.categoria == "Eletrodoméstico");
produtosEletrodomestico.forEach(produto => { 
    console.log(produto);
});

Find=> O método find ajuda você a encontrar um item específico dentro de um Array de acordo com algum critério 
de busca.
Por exemplo encontrar o nome paula

ex1.:
let nomes = [ 
  {nome: 'paula', idade: 23}, 
  {nome: 'joão', idade: 25}, 
  {nome: 'maria', idade: 10} 
];

let nome = nomes.find(function(nome) {
  return nome.nome === 'paula';
});
console.log(nome);

reduce => O reduce é muito útil quando precisamos pegar todos os elementos de um Array e reduzi-los a um único valor.
Quando queremos somar todos os valores de uma lista de números.

ex1.: 
SEM ARROW FUNCTION
var numeros = [1, 2, 3, 4, 5, 6];
var total = numeros.reduce(function(total, numero){
0return total + numero;
}, 0);
console.log(total);

var numeros = [1, 2, 3, 4, 5, 6];
var total = numeros.reduce((total, numero) => total + numero, 0);
console.log(total);

https://warcontent.com/metodos-arrays-javascript/
https://blog.betrybe.com/desenvolvimento-web/